import PushNotification from 'react-native-push-notification';

export const sendLocalNotification = (
  title: string,
  message: string,
  subtitle?: string,
) => {
  PushNotification.localNotification({
    when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
    usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
    timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

    messageId: 'google:message_id', // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

    actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
    invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

    /* iOS only properties */
    category: '', // (optional) default: empty string
    // subtitle: subtitle, // (optional) smaller title below notification title

    /* iOS and Android properties */
    id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    title: title, // (optional)
    message: message, // (required)
    // picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
    // userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
    playSound: true, // (optional) default: true
    soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
  });
};

export const onRegistered = (
  deviceToken: any,
  onToken: (token: string) => void,
) => {
  console.log('Registered For Remote Push', `Device Token: ${deviceToken}`);
  onToken(deviceToken);
};

export const onRegistrationError = (error: any) => {
  console.log(
    'Failed To Register For Remote Push',
    `Error (${error.code}): ${error.message}`,
  );
};

export const onRemoteNotification = (notification: any) => {
  const isClicked = notification.getData().userInteraction === 1;

  const result = `
    Title:  ${notification.getTitle()};\n
    Subtitle:  ${notification.getSubtitle()};\n
    Message: ${notification.getMessage()};\n
    badge: ${notification.getBadgeCount()};\n
    sound: ${notification.getSound()};\n
    category: ${notification.getCategory()};\n
    content-available: ${notification.getContentAvailable()};\n
    Notification is clicked: ${String(isClicked)}.`;

  if (notification.getTitle() == undefined) {
    console.info('Silent push notification Received', result);
  } else {
    console.info('Push Notification Received', result);
  }
  notification.finish('UIBackgroundFetchResultNoData');
};

export const onLocalNotification = (notification: any) => {
  const isClicked = notification.getData().userInteraction === 1;
};
